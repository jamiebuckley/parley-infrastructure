AWSTemplateFormatVersion: "2010-09-09"
Description: The service and task for Parley backend service
Parameters:
  ClusterName:
    Type: String
  LoadBalancer:
    Type: String
Resources:
  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ECSTask
      - ListenerRule
    Properties:
      Cluster: !Ref ClusterName
      Role: !Ref ServiceRole
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref ECSTask
      LoadBalancers:
        - ContainerName: ParleyContainer
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
  ECSTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: parley-family
      Cpu: 256
      Memory: 256
      ContainerDefinitions:
        - Name: ParleyContainer
          Image: 572391843849.dkr.ecr.eu-west-2.amazonaws.com/dev:latest
          PortMappings:
            - ContainerPort: 8080
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancer
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-7648db1e
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: parley-ecs-service-role
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: parley-ecs-service-role-policy
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                {
                  "Effect": "Allow",
                  "Action":
                    [
                      "ec2:AuthorizeSecurityGroupIngress",
                      "ec2:Describe*",
                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                      "elasticloadbalancing:Describe*",
                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                      "elasticloadbalancing:DeregisterTargets",
                      "elasticloadbalancing:DescribeTargetGroups",
                      "elasticloadbalancing:DescribeTargetHealth",
                      "elasticloadbalancing:RegisterTargets"
                    ],
                  "Resource": "*"
                }
                ]
            }
